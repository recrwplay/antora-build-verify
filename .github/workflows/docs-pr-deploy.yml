# Deploy HTML generated by Antora to surge.sh
# Docs are published at <org>-<repo>-<deployid>.surge.sh

# By default, this workflow runs on completion of a workflow called "Documentation PR Build"

# This workflow expects the triggering workflow to generate an artifact called "docs"
# - update the reference to "docs" and "docs.zip" in this workflow if your triggering workflow generates an artifact with a different name

name: "Documentation PR Deploy"
description: "Deploys preview docs for a PR to surge.sh"

on:
  workflow_run:
    workflows: ["Documentation PR Build"]
    types:
      - completed

jobs:
      
  setup-and-deploy:
#     if: github.event.workflow_run.conclusion == 'success'

    runs-on: ubuntu-latest

    outputs:
      deploy-id: ${{ steps.get-deploy-id.outputs.deploy-id }}
      deploy-url: ${{ steps.get-deploy-url.outputs.deploy-url }}

    steps:

      - uses: actions/checkout@v3

      - name: "Download built documentation"
        id: get-docs
        uses: actions/github-script@v6.0.0
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "docs"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{ github.workspace }}/docs.zip', Buffer.from(download.data));
      
      - run: unzip docs.zip

      - id: get-deploy-id
        run: |
          deployid=$(<deployid)
          echo "deploy-id=$deployid" >> $GITHUB_OUTPUT

      - id: get-deploy-url
        run: |
          deployurl=${{ github.event.repository.owner.login}}-${{ github.event.repository.name}}-${{ steps.get-deploy-id.outputs.deploy-id }}.surge.sh
          echo "deploy-url=$deployurl" >> $GITHUB_OUTPUT

      - name: deploy
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Deploy docs to surge
        run: |
          npm install -g surge
          deployurl=${{ github.event.repository.owner.login}}-${{ github.event.repository.name}}-${{ steps.get-deploy-id.outputs.deploy-id }}.surge.sh
          surge ./site $deployurl --token ${{ secrets.SURGE_TOKEN }}

      # deploy-comment is a file that contains the comment to be posted to the PR
      # it is created by the docs-pr-build workflow
      # and is saved to the docs.zip artifact
          
      # - name: Comment on PR (sticky)
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   with:
      #     number: ${{ steps.get-deploy-id.outputs.deploy-id }}
      #     path: deploy-comment
      #     recreate: true
      #     GITHUB_TOKEN: ${{ secrets.PR_COMMENT_TOKEN }}

   
      - name: Add deploy comment
        run: |
          gh pr comment  ${{ steps.get-deploy-id.outputs.deploy-id }} --body-file deploy-comment --edit-last
        env:
          GITHUB_TOKEN: ${{ secrets.PR_COMMENT_TOKEN }}      
